use serde::{Deserialize, Serialize};

use crate::{Snowflake, {presences::PresenceUpdate, welcomescreen_related::welcomescreens::WelcomeScreen, stage_instances::StageInstance}};

use super::{roles::Role, emojis::Emoji, features::Feature, voice_states::VoiceState, guild_members::GuildMember, channel_related::channels::Channel, stickers::Sticker, guild_scheduled_event_related::guild_scheduled_events::GuildScheduledEvent}; 

#[derive(Debug, Serialize, Deserialize)]
pub struct Guild {
    id: Snowflake,
    name: String,
    icon: Option<String>,
    icon_has: Option<String>,
    splash: Option<String>,
    discovery_splash: Option<String>,
    owner: Option<bool>,
    owner_id: i32,
    permissions: String,
    region: Option<String>,
    afk_channel_id: Option<Snowflake>,
    afk_timeout: i32,
    widget_enabled: bool,
    widget_channel_id: Option<Snowflake>,
    verification_level: i32,
    default_message_notifications: i32,
    explicit_content_filter: i32,
    roles: Vec<Role>,
    emojis: Vec<Emoji>,
    features: Vec<Feature>,
    mfa_level: i32,
    application_id: Option<Snowflake>,
    system_channel_id: Option<Snowflake>,
    system_channel_flags: i32,
    rules_channel_id: Option<Snowflake>,
    joined_at: Option<String>,
    large: Option<bool>,
    unavailable: Option<bool>,
    member_count: Option<i32>,
    voice_states: Option<Vec<VoiceState>>,
    members: Option<Vec<GuildMember>>,
    channels: Option<Vec<Channel>>,
    threads: Option<Vec<Channel>>,
    presences: Option<Vec<PresenceUpdate>>,
    max_presences: Option<i32>,
    max_members: Option<i32>,
    vanity_url_code: Option<String>,
    description: Option<String>,
    banner: Option<String>,
    premium_tier: i32,
    premium_subscription_count: Option<i32>,
    preferred_locale: String,
    public_updates_channel_id: Option<Snowflake>,
    max_video_channel_users: Option<i32>,
    approximate_member_count: Option<i32>,
    approximate_presence_count: Option<i32>,
    welcome_screen: Option<WelcomeScreen>,
    nsfw_level: i32,
    stage_instances: Option<Vec<StageInstance>>,
    stickers: Option<Vec<Sticker>>,
    guild_scheduled_events: Option<Vec<GuildScheduledEvent>>,
    premium_progress_bar_enabled: bool,
}